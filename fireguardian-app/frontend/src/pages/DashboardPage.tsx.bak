import React from 'react';
import { useQuery } from '@tanstack/react-query';
import { motion } from 'framer-motion';
import { formatDistanceToNowStrict } from 'date-fns';
import { es } from 'date-fns/locale';
import { 
  AlertCircle, 
  CheckCircle, 
  Flame, 
  Activity,
  Calendar,
  TrendingUp,
  Shield,
  MapPin,
  Plus,
  Clock,
  AlertTriangle
} from 'lucide-react';

// Componentes UI
import { Card, CardContent, CardHeader } from '../components/ui/Card';
import { StatCard } from '../components/ui/Card';
import { StatusBadge } from '../components/ui/Badge';
import { Button } from '../components/ui/Button';
import { Skeleton } from '../components/ui/LoadingSpinner';

// Datos y tipos
import { apiQueries } from '../utils/api';
import { useAuth } from '../hooks/useAuth';
// Nota: Los tipos se infieren automáticamente de las funciones de la API

// Función auxiliar para formatear fechas relativas
const formatRelativeTime = (date: Date): string => {
  return formatDistanceToNowStrict(date, {
    addSuffix: true,
    locale: es
  });
};

// Componente para mensajes de error
const ErrorMessage: React.FC<{
  title: string;
  message: string;
  onRetry?: () => void;
}> = ({ title, message, onRetry }) => {
  return (
    <Card className="border-red-200 bg-red-50">
      <CardContent className="py-4">
        <div className="flex items-start">
          <div className="flex-shrink-0 mr-3">
            <AlertCircle className="h-5 w-5 text-red-500" />
          </div>
          <div className="flex-1">
            <h4 className="font-medium text-red-800">{title}</h4>
            <p className="text-sm text-red-600 mt-1">{message}</p>
            {onRetry && (
              <Button 
                variant="outline" 
                size="sm" 
                className="mt-3 bg-white text-red-600 border-red-300 hover:bg-red-50"
                onClick={onRetry}
              >
                Reintentar
              </Button>
            )}
          </div>
        </div>
      </CardContent>
    </Card>
  );
};

const DashboardPage: React.FC = () => {
  const { user } = useAuth();

  // Consultas React Query para obtener datos del dashboard
  const { data: stats, error: statsError, isLoading: statsLoading, refetch: refetchStats } = useQuery({
    queryKey: ['dashboardStats'],
    queryFn: apiQueries.functions.getDashboardStats,
    staleTime: 5 * 60 * 1000, // 5 minutos
    refetchOnWindowFocus: false,
    retry: 1, // Limitar reintentos automáticos
    retryDelay: 1000 // Retrasar reintentos 1 segundo
  });

  const { data: recentActivity, error: activityError, isLoading: activityLoading, refetch: refetchActivity } = useQuery({
    queryKey: ['dashboardActivity'],
    queryFn: apiQueries.functions.getRecentActivity,
    staleTime: 1 * 60 * 1000, // 1 minuto
    refetchOnWindowFocus: false,
    retry: 1,
    retryDelay: 1000
  });

  const { data: alerts, error: alertsError, isLoading: alertsLoading, refetch: refetchAlerts } = useQuery({
    queryKey: ['dashboardAlerts'],
    queryFn: apiQueries.functions.getAlerts,
    staleTime: 5 * 60 * 1000, // 5 minutos
    refetchOnWindowFocus: false,
    retry: 1,
    retryDelay: 1000
  });
  
  // Comentamos esta consulta ya que está causando problemas
  /*
  const { data: performanceData, error: performanceError, isLoading: performanceLoading } = useQuery({
    queryKey: ['dashboardPerformance'],
    queryFn: apiQueries.functions.getPerformanceMetrics,
    staleTime: 10 * 60 * 1000, // 10 minutos
    refetchOnWindowFocus: false
  });
  */

  // Variable para mostrar errores generales
  const hasError = statsError || activityError || alertsError;

  // Función para obtener el icono adecuado según el tipo de actividad
  const getActivityIcon = (tipo: string) => {
    switch (tipo.toLowerCase()) {
      case 'mantenimiento':
        return <Activity className="h-5 w-5 text-blue-500" />;
      case 'recarga':
        return <Plus className="h-5 w-5 text-green-500" />;
      case 'vencimiento':
        return <Clock className="h-5 w-5 text-red-500" />;
      case 'instalacion':
        return <Shield className="h-5 w-5 text-purple-500" />;
      default:
        return <Activity className="h-5 w-5 text-gray-500" />;
    }
  };

  return (
    <div className="space-y-6">
      {/* Header */}
      <motion.div
        initial={{ opacity: 0, y: 20 }}
        animate={{ opacity: 1, y: 0 }}
        transition={{ duration: 0.5 }}
      >
        <div className="flex items-center justify-between">
          <div>
            <h1 className="text-3xl font-bold text-gray-900">
              ¡Bienvenido, {user?.nombre || 'Usuario'}!
            </h1>
            <p className="text-gray-600 mt-1">
              Aquí tienes un resumen del estado actual del sistema
            </p>
          </div>
          <div className="text-right">
            <p className="text-sm text-gray-500">
              Última actualización: {formatRelativeTime(new Date())}
            </p>
            <Button
              variant="outline"
              size="sm"
              onClick={() => refetchStats()}
              className="mt-2"
            >
              Actualizar
            </Button>
          </div>
        </div>
      </motion.div>

      {/* Error general */}
      {hasError && (
        <ErrorMessage
          title="Error al cargar el dashboard"
          message="No se pudieron cargar algunos datos. Intenta actualizar la página."
          onRetry={() => window.location.reload()}
        />
      )}

      {/* Estadísticas principales */}
      <motion.div
        initial={{ opacity: 0, y: 20 }}
        animate={{ opacity: 1, y: 0 }}
        transition={{ duration: 0.5, delay: 0.1 }}
      >
        <div className="flex justify-between items-center mb-4">
          <h2 className="text-xl font-semibold text-gray-900">
            Estadísticas Generales
          </h2>
          {statsError && (
            <Button 
              variant="outline" 
              size="sm" 
              onClick={() => refetchStats()}
              className="text-red-600 border-red-300 hover:bg-red-50"
            >
              <AlertCircle className="w-4 h-4 mr-2" /> Reintentar
            </Button>
          )}
        </div>
        
        {statsLoading ? (
          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4">
            {[...Array(4)].map((_, i) => (
              <Card key={i} className="p-6">
                <Skeleton className="h-12 w-12 rounded-lg mb-4" variant="rectangular" />
                <Skeleton lines={2} />
                <Skeleton className="h-4 w-20 mt-2" />
              </Card>
            ))}
          </div>
        ) : statsError ? (
          <div className="bg-red-50 border border-red-200 rounded-lg p-4 mb-6">
            <div className="flex items-center mb-2">
              <AlertCircle className="text-red-600 mr-2" />
              <h3 className="font-medium text-red-800">Error al cargar estadísticas</h3>
            </div>
            <p className="text-sm text-red-700 mb-2">No se pudieron cargar las estadísticas del dashboard. El servidor puede estar experimentando problemas.</p>
            <Button 
              variant="outline" 
              size="sm" 
              onClick={() => refetchStats()}
              className="text-red-600 border-red-300 hover:bg-red-100"
            >
              Reintentar
            </Button>
          </div>
        ) : stats ? (
          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4">
            <StatCard
              title="Total Extintores"
              value={stats.total_extintores}
              subtitle="Extintores registrados"
              icon={<Flame />}
              color="blue"
            />
            <StatCard
              title="Extintores Vigentes"
              value={stats.extintores_vigentes}
              subtitle="En buen estado"
              icon={<CheckCircle />}
              color="green"
              trend={{
                value: stats.extintores_vigentes > 0 ? 
                  Math.round((stats.extintores_vigentes / stats.total_extintores) * 100) : 0,
                isPositive: true,
                label: "del total"
              }}
            />
            <StatCard
              title="Extintores Vencidos"
              value={stats.extintores_vencidos}
              subtitle="Requieren atención inmediata"
              icon={<AlertCircle />}
              color="red"
              trend={{
                value: stats.extintores_vencidos > 0 ? 
                  Math.round((stats.extintores_vencidos / stats.total_extintores) * 100) : 0,
                isPositive: false,
                label: "del total"
              }}
            />
            <StatCard
              title="Por Vencer"
              value={stats.extintores_por_vencer}
              subtitle="En los próximos 30 días"
              icon={<AlertTriangle />}
              color="yellow"
              trend={{
                value: stats.extintores_por_vencer > 0 ? 
                  Math.round((stats.extintores_por_vencer / stats.total_extintores) * 100) : 0,
                isPositive: false,
                label: "del total"
              }}
            />
          </div>
        ) : (
          <ErrorMessage
            title="Error al cargar estadísticas"
            message="No se pudieron cargar las estadísticas. Intenta actualizar la página."
            onRetry={() => refetchStats()}
          />
        )}
      </motion.div>
      {/* Alertas y Actividad Reciente */}
      <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
        {/* Alertas */}
        <motion.div
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ duration: 0.5, delay: 0.2 }}
          className="mt-8"
        >
          <div className="flex justify-between items-center mb-4">
            <h2 className="text-xl font-semibold text-gray-900">
              Alertas y Notificaciones
            </h2>
            {alertsError && (
              <Button 
                variant="outline" 
                size="sm" 
                onClick={() => refetchAlerts()}
                className="text-red-600 border-red-300 hover:bg-red-50"
              >
                <AlertCircle className="w-4 h-4 mr-2" /> Reintentar
              </Button>
            )}
          </div>
          
          {alertsLoading ? (
            <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
              {[...Array(3)].map((_, i) => (
                <Card key={i} className="p-6">
                  <Skeleton className="h-8 w-8 rounded-full mb-4" variant="circular" />
                  <Skeleton lines={3} />
                </Card>
              ))}
            </div>
          ) : alertsError ? (
            <div className="bg-red-50 border border-red-200 rounded-lg p-4 mb-6">
              <div className="flex items-center mb-2">
                <AlertCircle className="text-red-600 mr-2" />
                <h3 className="font-medium text-red-800">Error al cargar alertas</h3>
              </div>
              <p className="text-sm text-red-700 mb-2">No se pudieron cargar las alertas del sistema. Intente nuevamente más tarde.</p>
              <Button 
                variant="outline" 
                size="sm" 
                onClick={() => refetchAlerts()}
                className="text-red-600 border-red-300 hover:bg-red-100"
              >
                Reintentar
              </Button>
            </div>
          ) : alerts ? (
            <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
              {/* Extintores Vencidos */}
              {alerts.extintores_vencidos.count > 0 && (
                <div className="flex items-start">
                  <div className="flex-shrink-0 mt-1">
                    <div className="p-2 bg-red-100 rounded-full">
                      <AlertCircle className="h-5 w-5 text-red-600" />
                    </div>
                  </div>
                  <div className="ml-3">
                    <h4 className="font-medium text-gray-900">
                      {alerts.extintores_vencidos.count} extintores vencidos
                    </h4>
                    <p className="text-sm text-gray-600 mt-1">
                      Estos extintores requieren recarga inmediata
                    </p>
                    <div className="mt-2">
                      <StatusBadge status="high" />
                    </div>
                  </div>
                </div>
              )}

              {/* Extintores Por Vencer */}
              {alerts.extintores_por_vencer.count > 0 && (
                <div className="flex items-start">
                  <div className="flex-shrink-0 mt-1">
                    <div className="p-2 bg-yellow-100 rounded-full">
                      <AlertTriangle className="h-5 w-5 text-yellow-600" />
                    </div>
                  </div>
                  <div className="ml-3">
                    <h4 className="font-medium text-gray-900">
                      {alerts.extintores_por_vencer.count} extintores por vencer
                    </h4>
                    <p className="text-sm text-gray-600 mt-1">
                      Vencen en los próximos 30 días
                    </p>
                    <div className="mt-2">
                      <StatusBadge status="medium" />
                    </div>
                  </div>
                </div>
              )}

              {/* Mantenimientos Pendientes */}
              {alerts.mantenimientos_pendientes.count > 0 && (
                <div className="flex items-start">
                  <div className="flex-shrink-0 mt-1">
                    <div className="p-2 bg-blue-100 rounded-full">
                      <Activity className="h-5 w-5 text-blue-600" />
                    </div>
                  </div>
                  <div className="ml-3">
                    <h4 className="font-medium text-gray-900">
                      {alerts.mantenimientos_pendientes.count} mantenimientos pendientes
                    </h4>
                    <p className="text-sm text-gray-600 mt-1">
                      Equipos que requieren revisión
                    </p>
                    <div className="mt-2">
                      <StatusBadge status="low" />
                    </div>
                  </div>
                  {/* Mostrar actividades combinadas y ordenadas por fecha */}
                  {[
                    ...recentActivity.mantenimientos_recientes.map(item => ({
                      ...item,
                      tipo: 'mantenimiento',
                      fecha: new Date(item.fecha),
                      descripcion: `Mantenimiento en extintor ${item.extintor.codigo_interno || item.extintor.id}`,
                      usuario: item.tecnico
                    })),
                    ...recentActivity.extintores_recientes.map(item => ({
                      id: item.id,
                      fecha: new Date(item.fecha_creacion),
                      tipo: 'extintor',
                      descripcion: `Nuevo extintor registrado: ${item.codigo_interno || item.id}`,
                      extintor: {
                        id: item.id,
                        codigo_interno: item.codigo_interno,
                        tipo: item.tipo,
                        ubicacion: item.ubicacion
                      },
                      usuario: 'Sistema'
                    }))
                  ]
                  .sort((a, b) => b.fecha.getTime() - a.fecha.getTime())
                  .slice(0, 10)
                  .map((activity, index) => (
                    <motion.div
                      key={`${activity.tipo}-${activity.id}`}
                      className="flex items-start"
                      initial={{ opacity: 0, y: 10 }}
                      animate={{ opacity: 1, y: 0 }}
                      transition={{ delay: index * 0.05 }}
                    >
                      <div className="flex-shrink-0 mt-0.5">
                        {getActivityIcon(activity.tipo)}
                      </div>
                      <div className="flex-1 min-w-0 ml-3">
                        <p className="text-sm text-gray-900">
                          {activity.descripcion}
                        </p>
                        <div className="flex items-center text-xs text-gray-500 mt-1 space-x-2">
                          <span>{activity.usuario}</span>
                          <span>•</span>
                          <span>{formatRelativeTime(activity.fecha)}</span>
                          {activity.extintor && activity.extintor.ubicacion && (
                            <>
                              <span>•</span>
                              <span className="flex items-center">
                                <MapPin className="h-3 w-3 mr-1" />
                                {activity.extintor.ubicacion}
                              </span>
                            </>
                          )}
                        </div>
                      </div>
                    </motion.div>
                  ))}
                </div>
              ) : (
                <div className="text-center py-8">
                  <Activity className="h-12 w-12 text-gray-400 mx-auto mb-3" />
                  <p className="text-gray-600">No hay actividad reciente</p>
                  <p className="text-sm text-gray-500 mt-1">
                    Las acciones aparecerán aquí cuando se realicen
                  </p>
                </div>
              )}
            </CardContent>
          </Card>
        </motion.div>
      </div>

      {/* Acciones Rápidas */}
      <motion.div
        initial={{ opacity: 0, y: 20 }}
        animate={{ opacity: 1, y: 0 }}
        transition={{ duration: 0.5, delay: 0.4 }}
      >
        <Card>
          <CardHeader
            title="Acciones Rápidas"
            subtitle="Accede rápidamente a las funciones más utilizadas"
            divider
          />
          <CardContent className="p-4">
            <div className="grid grid-cols-2 md:grid-cols-4 gap-4">
              <Button
                variant="outline"
                size="lg"
                className="h-20 flex flex-col space-y-2"
                onClick={() => window.location.href = '/extintores/nuevo'}
              >
                <Shield className="h-6 w-6" />
                <span className="text-sm">Nuevo Extintor</span>
              </Button>
              
              <Button
                variant="outline"
                size="lg"
                className="h-20 flex flex-col space-y-2"
                onClick={() => window.location.href = '/mantenimientos/nuevo'}
              >
                <Activity className="h-6 w-6" />
                <span className="text-sm">Mantenimiento</span>
              </Button>
              
              <Button
                variant="outline"
                size="lg"
                className="h-20 flex flex-col space-y-2"
                onClick={() => window.location.href = '/reportes'}
              >
                <TrendingUp className="h-6 w-6" />
                <span className="text-sm">Generar Reporte</span>
              </Button>
              
              <Button
                variant="outline"
                size="lg"
                className="h-20 flex flex-col space-y-2"
                onClick={() => window.location.href = '/extintores?filtro=proximos_vencer'}
              >
                <Calendar className="h-6 w-6" />
                <span className="text-sm">Próximos a Vencer</span>
              </Button>
            </div>
          </CardContent>
        </Card>
      </motion.div>
    </div>
  );
};

export default DashboardPage;
